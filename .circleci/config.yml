version: 2.1

orbs:
  heroku: circleci/heroku@0.0.8

workflows:
  version: 2
  build:
    jobs:
      - build
#       - heroku/deploy-via-git
jobs:
  build:    
    environment:
      RAILS_ENV: test
      CC_TEST_REPORTER_ID: f39e060a8b1a558ebd8aff75d5b9760bf1ae98f3f85d628ae28814f3c66438cd
      DATABASE_URL: "postgres://postgres@localhost/"
      COVERAGE: true
    docker:
      - image: circleci/ruby:2.6.3-stretch-node-browsers
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_DB: PracticalDeveloper_development
          POSTGRES_USER: devto
    steps:
      - checkout
      - restore_cache:
          keys:
            - bundle-cache
            - npmcachev2
      - run:
          name: Steps
          command: |
            date --rfc-3339=seconds
            sudo gem update --system
            gem install bundler
            bundle update --bundler
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
            export NVM_DIR=$HOME/.nvm
            source $NVM_DIR/nvm.sh
            #export NVM_DIR="/opt/circleci/.nvm"
            #[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install
            bundle install --path vendor/bundle
      - save_cache:
          key: bundle-cache
          paths:
            - vendor/bundle
      - run:
          name: Steps
          command: |
            yarn install
      - save_cache:
          key: npmcachev2
          paths:
            - node_modules
            - ~/.npm
            - ~/.cache
      - run:
          name: Steps
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter            
            bundle exec rails db:create
            bundle exec rails webpacker:compile
            bundle exec rails db:schema:load
            echo "***** 1"
            ./cc-test-reporter before-build
            echo "***** 2"
            bundle exec rspec spec --color --tty
            echo "***** 3"
            [ ! -f .approvals ] || bundle exec approvals verify --ask false
            echo "***** 4"
            ./cc-test-reporter format-coverage -t simplecov -o coverage/codeclimate.simplecov.json
            echo "***** 5"
            yarn test --colors
            echo "***** 6"
            ./cc-test-reporter format-coverage -t lcov -o coverage/codeclimate.lcov.json
            echo "***** 7"
            ./cc-test-reporter sum-coverage coverage/codeclimate.*.json
            echo "***** 8"
            ./cc-test-reporter upload-coverage
            echo "***** 9"
            bundle exec bundle-audit check --update --ignore CVE-2015-9284
            echo "***** 10"
            yarn build-storybook
